---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2022/2/25 10:49
---

CommonUtils = CommonUtils or {}


-- function CommonUtils.Require(prefixPath, postfixPath)
--     local path
--     if string.isEmpty(prefixPath) then
--         path = postfixPath
--     else
--         path = prefixPath .. "." .. postfixPath
--     end
--     local ok, ret = pcall(require, path)
--     if ok then
--         return ret
--     else
--         DebugLogError(debug.traceback(string.format("do require[%s] error: %s", path, ret), 1))
--     end
-- end

function CommonUtils.tprint(tbl, indent)
    if type(tbl) ~= "table" then
        return tbl
    end
    if not indent then indent = 0 end
    local toprint = string.rep(" ", indent) .. "{\r\n"
    indent = indent + 2
    for k, v in pairs(tbl) do
        toprint = toprint .. string.rep(" ", indent)
        if (type(k) == "number") then
            toprint = toprint .. "[" .. k .. "] = "
        elseif (type(k) == "string") then
            toprint = toprint .. k .. "= "
        end
        if (type(v) == "number") then
            toprint = toprint .. v .. ",\r\n"
        elseif (type(v) == "string") then
            toprint = toprint .. "\"" .. v .. "\",\r\n"
        elseif (type(v) == "table") then
            toprint = toprint .. CommonUtils.tprint(v, indent + 2) .. ",\r\n"
        else
            toprint = toprint .. "\"" .. tostring(v) .. "\",\r\n"
        end
    end
    toprint = toprint .. string.rep(" ", indent - 2) .. "}"
    return toprint
end

--- 跟 table.sort() 相比，comp调用次数较少
---@generic V
---@param data V[]
---@param keyFunc fun(a:V): number
---@return V[]
function table.SortBy(data, keyFunc)
    local tempList = {}
    for i, element in ipairs(data) do
        tempList[i] = {
            source = element,
            key = keyFunc(element)
        }
    end

    table.sort(tempList, function(a, b)
        return a.key < b.key
    end)
    return table.Select(tempList, function(a) return a.source end)
end

--- 获取数组切片
---@generic V
---@param table V[]
---@param startIndex number
---@param endIndex number|nil
---@return V[]
function table.Slice(table, startIndex, endIndex)
    assert(startIndex > 0)
    if endIndex == nil then
        endIndex = #table
    else
        endIndex = math.min(endIndex, #table)
    end

    if startIndex > endIndex then
        return {}
    end

    local ret = {}
    for i = startIndex, endIndex do
        ret[#ret + 1] = table[i]
    end

    return ret
end

--- 迭代获得 table 的所有 key
function table.Keys(table)
    local index
    return function()
        index, _ = next(table, index)
        return index
    end
end

--- 迭代获得 table 的所有 value
function table.Values(table)
    local index
    return function()
        local value
        index, value = next(table, index)
        return value
    end
end

--- 增量更新 table
function table.Update(src, updateTable)
    for k, v in pairs(updateTable) do
        src[k] = v
    end
end

--- table是否为array
-- -1   Not an array
-- 0    Empty table
-- >0   Highest index in the array
function table.IsArray(tbl)
	local count = 0
	local max = 0
	for key, _ in pairs(tbl) do
		if type(key) ~= "number" or key % 1 ~= 0 or key <= 0 then
			return false  -- 如果键不是正整数，返回false
		end
		if key > max then
			max = key
		end
		count = count + 1
	end

	return max == count
end

--- 求 table 中所有元素的和，
---@generic V1, V2
---@param tbl V1[]
---@param valueGetter fun(v: V1): V2 元素值获取器，默认元素自身
---@return V2
function table.Sum(tbl, valueGetter)
    valueGetter = valueGetter or function(v) return v end
    local result = 0
    for value in table.Values(tbl) do
        result = result + valueGetter(value)
    end
    return result
end

--- 数组值选择器，类似 C# 的
---@generic V
---@param table V[]
---@param selector  fun(a:V): any
---@return any[]
function table.Select(table, selector)
    local ret = {}
    for i, element in ipairs(table) do
        ret[i] = selector(element)
    end
    return ret
end

--- 判断字符串是否为 nil 或空字符串
function string.isEmpty(s)
    return s == nil or s == ""
end
